#!/usr/bin/env bash
# TODO: use radare2 or write a wrapper for libcapstone in C

# Testing for options and parameters
# So we can setup defaults

#VAR=${1:-test}

#echo $VAR

if [ "$1" == "-l" ] || [ "$1" == "-b" ]; then

	ARCH="-x64"

elif [[ "$1" == %* ]]; then

	ARCH="-x64"
	MODIFIER="$1"
else
	ARCH="$1"

fi

if [ "$1" == "-l" ] || [ "$1" == "-b" ]; then
	ENDIANNESS="$1"

elif [[ "$2" != "-l" ]] && [[ "$2" != "-b" ]]; then
	ENDIANNESS="-l"
else
	ENDIANNESS="$2"

fi

if [[ "$2" == %* ]]; then
	MODIFIER="$2"

elif [[ "$3" == %* ]]; then
	MODIFIER="$3"
fi

EXPRESSION=$(echo "$@" | sed -e "s/${ARCH}//" -e "s/${ENDIANNESS}//" -e  "s/${MODIFIER}//")

usage() {
	echo "$(basename $0): hex/opcodes/raw web disassembler

Usage: $(basename $0) [-arm,-thumb,-aarch64,-m32,-m64,-ppc32,-ppc64,-sparc,-x16,-x32,x64] [-l,-b] [%r,%x] [expression]
ARCH:
	-arm:		armel 32 bit
	-thumb:		armel 32 bit with thumb extensions
	-aarch64:	armel 64 bit
	-m32:		mips  32 bit
	-m64:		mips  64 bit
	-ppc32:		ppc   32 bit
	-ppc64:		ppc   64 bit
	-sparc:		sparc
	-x16:		x86   16 bit
	-x32:		x86   32 bit
	-x64:		x86   64 bit

ENDIANNESS:

	-l		Little endian
	-b		Big endian

INPUT:
	%r	input raw
	%o	input opcodes
	%x	input hexadecimal


DEFAULTS:

	If no arch is supplied, then use x86_64

	If no endianess is supplied then use little endian

CAVEATS:

	When using the %o (opcodes) modifier, wrap your input with ' or \"


Site: http://shell-storm.org/online/Online-Assembler-and-Disassembler"

}

IN_RAW() {
	CONV="$(echo -n ${EXPRESSION} | xxd -c256 -p - | sed 's/^[ \t]*//;s/[ \t]*$//' | sed -e 's/.\{2\}/&\\x/g' -e 's/\(.*\)\\x/\1/')"
	DUMP
}

IN_OPCODES() {
	CONV="$(echo ${EXPRESSION} | sed 's/^[ \t]*//;s/[ \t]*$//')"
	DUMP
}

IN_HEX() {
	CONV="\x$(echo ${EXPRESSION} | sed -e 's/.\{2\}/&\\x/g' -e 's/\(.*\)\\x/\1/')"
	DUMP
}

DUMP() {
	DIS=$(python -c 'from capstone import *
CODE = b'\"${CONV}\"'
md = Cs('"${CS_ARCH}"', '"${CS_MODE}"')
for i in md.disasm(CODE, 0x1000):
	print("0x%x:\t%s\t%s" %(i.address, i.mnemonic, i.op_str))')

	HEX=$(echo "${DIS}" | grep "push" | cut -f3 -d$'\t' | grep "0x")

	for i in ${HEX}; do
		ASCII=$(echo -n "0 " "${i}" | xxd -r -;)

		FINAL=$(echo "${DIS}" | sed -e "s,${i},${i} # ${ASCII},")
		DIS="${FINAL}"
	done
	echo "${FINAL}"
}


case "${ARCH}" in
	"-arm")
		CS_ARCH="CS_ARCH_ARM"
		CS_MODE="CS_MODE_ARM";;

	"-thumb")
		CS_ARCH="CS_ARCH_ARM"
		CS_MODE="CS_MODE_THUMB";;

	"-aarch64")
		CS_ARCH="CS_ARCH_ARM64"
		CS_MODE="CS_MODE_ARM";;

	"-m32")
		CS_ARCH="CS_ARCH_MIPS"
		CS_MODE="CS_MODE_MIPS32";;

	"-m64")
		CS_ARCH="CS_ARCH_MIPS"
		CS_MODE="CS_MODE_MIPS64";;

	"-ppc32")
		CS_ARCH="CS_ARCH_PPC"
		CS_MODE="CS_MODE_32";;

	"-ppc64")
		CS_ARCH="CS_ARCH_PPC"
		CS_MODE="CS_MODE_32";;

	"-sparc")
		CS_ARCH="SPARC";;

	"-x16")
		CS_ARCH="CS_ARCH_X86"
		CS_MODE="CS_MODE_16";;

	"-x32")
		CS_ARCH="CS_ARCH_X86"
		CS_MODE="CS_MODE_32";;

	"-x64")
		CS_ARCH="CS_ARCH_X86"
		CS_MODE="CS_MODE_64";;

	*)
		CS_ARCH="CS_ARCH_X86"
		CS_MODE="CS_MODE_64";;

esac

case "${ENDIANNESS}" in
	"-l")
		ENDIANNESS="little";;

	"-b")
		ENDIANNESS="big";;

	*)
		ENDIANNESS="little";;
esac

case "${MODIFIER}" in
	"%r")
		#EXPRESSION=$(echo "${ALL_OPTS}" | sed -e "s/${ARCH}//" -e "s/${ENDIANNESS}//" -e  "s/${MODIFIER}//")
		IN_RAW
		exit 0
	;;
	"%o")
		#EXPRESSION=$(echo "${ALL_OPTS}" | sed -e "s/${ARCH}//" -e "s/${ENDIANNESS}//" -e  "s/${MODIFIER}//")
		IN_OPCODES
		exit 0

	;;
	"%x")
		#EXPRESSION=$(echo "${ALL_OPTS}" | sed -e "s/${ARCH}//" -e "s/${ENDIANNESS}//" -e  "s/${MODIFIER}//")
		IN_HEX
		exit 0
	;;
	*)
		usage
		exit 1
	;;
esac
