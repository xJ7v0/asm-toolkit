#!/bin/bash

# ascii to hex
function atoh() { echo -n "$@" | xxd -c4 -; echo; }

# hex to ascii
function htoa() { echo -n "0 " "$@" | xxd -r -; echo; }

function floor()
{
	float=$1
	[[ $float == *"."* ]] && fraction=$((${float/*.}))
	floor_val=${float/.*}

	#			 check if neg	check if frac exists
	[[ $float > $floor_val && $float == "-"* && $fraction != 0 ]] && floor_val=$(($floor_val-1))
	echo $floor_val
}


magic_division_number()
{
	delta=0
	BITS=32
	div_bug=$(( (( (1 << $BITS) - 1) & "$1") ))
	div=$1
	bitlow=$((1<<($BITS-1)))
	bithi=$((1<<$BITS))

	if [[ -z $2 ]]; then
		# signed
		if [[ $(($div >= $bithi)) == 1 || $(($div < -$bitlow)) == 1 ]]; then
			echo "out of range:" $div
			return 1
		fi
	else
		# unsinged
		if [[ $div -ge $bithi || $div -lt 0 ]]; then
			echo "out of range:" $div
			return 1
		fi
	fi

	if [[ -z $2 ]]; then
		if [[ $(($div >= $bitlow)) == 1 ]]; then
			div=$(($div-$bithi))
		fi
	fi

	if [[ -z $2 ]]; then
		# absolute
		abs_d=${div/-}
	else
		abs_d=$div
	fi

	let t="$bitlow + ($div_bug >> ($BITS - 1))"
	let abs_nc="($t - 1) - ($t % $abs_d)"

	p=$(($BITS-1))
	# quotients
	q1=$(floor $(($bitlow/$abs_nc)))
	q2=$(floor $(($bitlow/$abs_d)))
	# remainders
	r1=$(($bitlow - $q1*$abs_nc))
	r2=$(($bitlow - $q2*$abs_d))

	while true; do

		let p++
		let q1="$q1<<1"
		let q2="$q2<<1"
		let r1="$r1<<1"
		let r2="$r2<<1"

		[[ $(($r1 >= $abs_nc)) == 1 ]] && let q1++ && let r1="$r1 - $abs_nc"
		[[ $(($r2 >= $abs_d))  == 1 ]] && let q2++ && let r2="$r2 - $abs_d"

		let delta="$abs_d - $r2"

		[[ $(($q1 < $delta)) == 1 ]] && break
		[[ $(($q1 == $delta)) == 1 && $(($r1 == 0)) == 1  ]] && break
	done

	let magic="$q2 + 1"
	if [[ -z $2 ]] ;then
		[[ $div == "-"* ]] && magic=$(($bithi - $magic))
	fi

	let shift="$p - $BITS"

	if [[ -z $2 ]]; then

		echo "magic signed division: $magic"
		echo "	 shift amount: $shift"
	else

		echo "magic unsigned division: $magic"
		echo "	   shift amount: $shift"

	fi
}


MODIFIER=$1

[[ -z $BITS ]] && BITS=64

if [[ $# == 0 ]]; then
	echo "$(basename $0): int/hex/oct/bin conversion and magic division number
Usage: $(basename $0) [%d,%x,%o,%b] [expression]
    %d    print result in decimal
    %x    print result in hexadecimal
    %o    print result in octal
    %b    print result in binary

    %sb   print result in signed binary
    %sx   print result in signed hexadecimal"

    %ms   print magic number for fast signed division
    %mu   print magic number for fast unsigned division

    %atoh print ascii to hex
    %htoa print hex to ascii
"
	exit 1
fi

case "$MODIFIER" in
	"%d") shift; a="$@"; python -c "print(int($a))";;
	"%x") shift; a="$@"; python -c "print(hex($a))";;
	"%o") shift; a="$@"; python -c "print(oct($a))";;
	"%b") shift; a="$@"; python -c "print(bin($a))";;
	"%sx")shift; a="$@"; python -c "print(hex(((1 << $BITS)-1) & $a))";;
	"%sb")shift; a="$@"; python -c "print(bin(((1 << $BITS)-1) & $a))";;

	"%ms") shift; a="$@"; magic_division_number `python -c "print(int($a))"`;;
	"%mu") shift; a="$@"; magic_division_number `python -c "print(int($a))"` unsigned;;

	"%atoh") shift; a="$@"; atoh "$a";;
	"%htoa") shift; a="$@"; htoa `python -c "print(hex($a))"`;;

	*) a="$@"; python -c "print(f'{int($a)}	{hex($a)}	{oct($a)}	{bin($a)}')";;
esac

exit $?
